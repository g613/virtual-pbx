<html>
<!-- $Id: phone_p_web_phone.tt,v 1.9 2024/10/27 19:05:49 gosha Exp $ -->
<head>
	<title>XVB-PBX phone</title>
	
	<link href="/xvb/css/bootstrap.css?r=4621-[% UNIXTIME %]" rel="stylesheet" />
	[% IF USER_CREDS.CSS_HREF eq '' %]
	<link rel="stylesheet" type="text/css" href="/xvb/xvb.css?r=4621-[% UNIXTIME %]" />
	[% ELSE %]
	<link rel="stylesheet" type="text/css" href="[% USER_CREDS.CSS_HREF %]" />
	[% END %]
	<script language="JavaScript" src="/xvb/js/xvb.js?r=4621-[% UNIXTIME %]"></script>

	<script src="/xvb/js/SIPml-api.js?svn=252" type="text/javascript"> </script>
	
	<style type="text/css">
    	.call-options {
		padding: 5px 0 5px 0;
		border: 1px solid #eee;
		border: 1px solid rgba(0, 0, 0, 0.08);
		-webkit-border-radius: 4px;
		-moz-border-radius: 4px;
		border-radius: 4px;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
		-moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
		-webkit-transition-property: opacity;
		-moz-transition-property: opacity;
		-o-transition-property: opacity;
		-webkit-transition-duration: 1s;
		-moz-transition-duration: 1s;
		-o-transition-duration: 1s;
    	}
	</style>

    <!-- Javascript code -->
    <script type="text/javascript">

        // to avoid caching
        //if (window.location.href.indexOf("svn=") == -1) {
        //    window.location.href += (window.location.href.indexOf("?") == -1 ? "svn=236" : "&svn=229");
        //}

        var sTransferNumber;
        var oRingTone, oRingbackTone;
        var oSipStack, oSipSessionRegister, oSipSessionCall, oSipSessionTransferCall;
        var audioRemote;
        var bFullScreen = false;
        var oNotifICall;
        var oConfigCall;
        var oReadyStateTimer;
		var uiAutoAnswer = 0;

        C =
        {
            divKeyPadWidth: 220
        };

        window.onload = function () {
            window.console && window.console.info && window.console.info("location=" + window.location);

            audioRemote = document.getElementById("audio_remote");

            // set debug level
            SIPml.setDebugLevel((window.localStorage && window.localStorage.getItem('org.doubango.expert.disable_debug') == "true") ? "error" : "info");

            loadCredentials();
            loadCallOptions();

            // Initialize call button
            uiBtnCallSetText("Call");

            var getPVal = function (PName) {
                var query = window.location.search.substring(1);
                var vars = query.split('&');
                for (var i = 0; i < vars.length; i++) {
                    var pair = vars[i].split('=');
                    if (decodeURIComponent(pair[0]) === PName) {
                        return decodeURIComponent(pair[1]);
                    }
                }
                return null;
            }

            var preInit = function () {
                // set default webrtc type (before initialization)
                var s_webrtc_type = getPVal("wt");
                var s_fps = getPVal("fps");
                var s_mvs = getPVal("mvs"); // maxVideoSize
                var s_mbwu = getPVal("mbwu"); // maxBandwidthUp (kbps)
                var s_mbwd = getPVal("mbwd"); // maxBandwidthUp (kbps)
                var s_za = getPVal("za"); // ZeroArtifacts
                var s_ndb = getPVal("ndb"); // NativeDebug

                if (s_webrtc_type) SIPml.setWebRtcType(s_webrtc_type);

                // initialize SIPML5
                SIPml.init(postInit);

                // set other options after initialization
                if (s_fps) SIPml.setFps(parseFloat(s_fps));
                if (s_mvs) SIPml.setMaxVideoSize(s_mvs);
                if (s_mbwu) SIPml.setMaxBandwidthUp(parseFloat(s_mbwu));
                if (s_mbwd) SIPml.setMaxBandwidthDown(parseFloat(s_mbwd));
                if (s_za) SIPml.setZeroArtifacts(s_za === "true");
                if (s_ndb == "true") SIPml.startNativeDebug();

                //var rinningApps = SIPml.getRunningApps();
                //var _rinningApps = Base64.decode(rinningApps);
                //tsk_utils_log_info(_rinningApps);
            }

            oReadyStateTimer = setInterval(function () {
                if (document.readyState === "complete") {
                    clearInterval(oReadyStateTimer);
                    // initialize SIPML5
                    preInit();
                }
            },
            500);
        };

        function postInit() {
            // check for WebRTC support
            if (!SIPml.isWebRtcSupported()) {
                // is it chrome?
                if (SIPml.getNavigatorFriendlyName() == 'chrome') {
                    if (confirm("You're using an old Chrome version or WebRTC is not enabled.\nDo you want to see how to enable WebRTC?")) {
                        window.location = 'http://www.webrtc.org/running-the-demos';
                    }
                    else {
                        window.location = "index.html";
                    }
                    return;
                }
                else {
                    if (confirm("webrtc-everywhere extension is not installed. Do you want to install it?\nIMPORTANT: You must restart your browser after the installation.")) {
                        window.location = 'https://github.com/sarandogou/webrtc-everywhere';
                    }
                    else {
                        // Must do nothing: give the user the chance to accept the extension
                        // window.location = "index.html";
                    }
                }
            }

            // checks for WebSocket support
            if (!SIPml.isWebSocketSupported()) {
                if (confirm('Your browser don\'t support WebSockets.\nDo you want to download a WebSocket-capable browser?')) {
                    window.location = 'https://www.google.com/intl/en/chrome/browser/';
                }
                else {
                    window.location = "index.html";
                }
                return;
            }

            if (!SIPml.isWebRtcSupported()) {
                if (confirm('Your browser don\'t support WebRTC.\naudio/video calls will be disabled.\nDo you want to download a WebRTC-capable browser?')) {
                    window.location = 'https://www.google.com/intl/en/chrome/browser/';
                }
            }

            btnRegister.disabled = false;
            document.body.style.cursor = 'default';
            oConfigCall = {
                audio_remote: audioRemote,
                screencast_window_id: 0x00000000, // entire desktop
                bandwidth: { audio: undefined, video: undefined },
                events_listener: { events: '*', listener: onSipEventSession },
                sip_caps: []
            };
        }

        function loadCallOptions() {
            if (window.localStorage) {
                var s_value;
                if ((s_value = window.localStorage.getItem('vpbx.call.last_phone_number.[% PHONE.callerid %]'))) txtPhoneNumber.value = s_value;
            }
        }

	function saveCallOptions() {
		if (window.localStorage) {
			window.localStorage.setItem('vpbx.call.last_phone_number.[% PHONE.callerid %]', txtPhoneNumber.value);
		}
		var cur_date = new Date();
		appendCallHistory(txtPhoneNumber.value, "<-- "+ txtPhoneNumber.value +"     "+ cur_date.toLocaleString());
	}
	
	function appendCallHistory(phone,description) {
		var select = document.getElementById('call_history');

		if ( select.length > 2 ) {
			if ( select[2].value == phone && description.substr(0,3) == select[2].text.substr(0,3) ) {
				var re = /\( (\d+) \)$/;
				if ( re.test(select[2].text) ) {
					var re_res = re.exec(select[2].text);
					var attempt = Number(re_res[1]);
					attempt += 1;
					select[2].text = description + ' ( '+ attempt +' )';
				} else {
					select[2].text = description + ' ( 2 )';
				}
				//select[2].text = description;
                		return;
			}
		}

                if ( select.length < 100 ) {
			var opt = document.createElement('option');
			select.appendChild(opt);
		}

		for (var i = select.length-1; i>2; i--) {
			select[i].value = select[i-1].value;
			select[i].text = select[i-1].text;
                }
		select[2].value = phone;
		select[2].text = description;
	}
        
		function AutoAnswer() {
			if ( uiAutoAnswer == 0 ) {
				uiAutoAnswer = 1;
				btnAutoAnswer.setAttribute("class", "btn btn-success");
			} else {
				uiAutoAnswer = 0; 
				btnAutoAnswer.setAttribute("class", "btn btn-primary");
			}
        };

        function loadCredentials() {
            if (window.localStorage) {
                // IE retuns 'null' if not defined
                var s_value;
                if ((s_value = window.localStorage.getItem('vpbx.identity.password.[% PHONE.callerid %]'))) txtPassword.value = s_value;
            }
        };

        function saveCredentials() {
            if (window.localStorage) {
                window.localStorage.setItem('vpbx.identity.password.[% PHONE.callerid %]', txtPassword.value);
            }
        };

        // sends SIP REGISTER request to login
        function sipRegister() {
            // catch exception for IE (DOM not ready)
            try {
                btnRegister.disabled = true;
                if (!txtRealm.value || !txtPrivateIdentity.value) {
                    txtRegStatus.innerHTML = '<b>Please fill madatory fields (*)</b>';
                    btnRegister.disabled = false;
                    return;
                }

                // enable notifications if not already done
                if (window.webkitNotifications && window.webkitNotifications.checkPermission() != 0) {
                    window.webkitNotifications.requestPermission();
                }

                // save credentials
                saveCredentials();

                // update debug level to be sure new values will be used if the user haven't updated the page
                SIPml.setDebugLevel((window.localStorage && window.localStorage.getItem('org.doubango.expert.disable_debug') == "true") ? "error" : "info");

                // create SIP stack
                oSipStack = new SIPml.Stack({
                    realm: txtRealm.value,
                    impi: txtPrivateIdentity.value,
                    impu: 'sip:'+txtPrivateIdentity.value +'@'+txtRealm.value,
                    password: txtPassword.value,
                    display_name: txtDisplayName.value,
                    websocket_proxy_url: txtWebSocket.value,
                    outbound_proxy_url: null,
                    ice_servers: txtICE.value,
                    enable_rtcweb_breaker: false,
                    events_listener: { events: '*', listener: onSipEventStack },
                    enable_early_ims: true,
                    enable_media_stream_cache: false,
                    sip_headers: [
                            { name: 'User-Agent', value: 'XVB-WebPhone/sipML5 3.0' }
                    ]
                }
                );
                if (oSipStack.start() != 0) {
                    txtRegStatus.innerHTML = '<b>Failed to start the SIP stack</b>';
                }
                else return;
            }
            catch (e) {
                txtRegStatus.innerHTML = "<b>2:" + e + "</b>";
            }
            btnRegister.disabled = false;
        }

        // sends SIP REGISTER (expires=0) to logout
        function sipUnRegister() {
            if (oSipStack) {
                oSipStack.stop(); // shutdown all sessions
            }
        }

        // makes a call (SIP INVITE)
        function sipCall(s_type) {
			var number4Call = txtPhoneNumber.value.replace(/([\)\(\s ._-]+)/gi, '');
			if (oSipStack && !oSipSessionCall && !tsk_string_is_null_or_empty(number4Call)) {
                btnCall.disabled = true;
                btnHangUp.disabled = false;
                // create call session
                oSipSessionCall = oSipStack.newSession(s_type, oConfigCall);
                // make call
                if (oSipSessionCall.call(number4Call) != 0) {
                    oSipSessionCall = null;
                    txtCallStatus.value = 'Failed to make call';
                    btnCall.disabled = false;
                    btnHangUp.disabled = true;
                    return;
                }
                saveCallOptions();
            }
            else if (oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Connecting...</i>';
                oSipSessionCall.accept(oConfigCall);
            }
        }

        // holds or resumes the call
        function sipToggleHoldResume() {
            if (oSipSessionCall) {
                var i_ret;
                btnHoldResume.disabled = true;
                txtCallStatus.innerHTML = oSipSessionCall.bHeld ? '<i>Resuming the call...</i>' : '<i>Holding the call...</i>';
                i_ret = oSipSessionCall.bHeld ? oSipSessionCall.resume() : oSipSessionCall.hold();
                if (i_ret != 0) {
                    txtCallStatus.innerHTML = '<i>Hold / Resume failed</i>';
                    btnHoldResume.disabled = false;
                    return;
                }
            }
        }

        // Mute or Unmute the call
        function sipToggleMute() {
            if (oSipSessionCall) {
                var i_ret;
                var bMute = !oSipSessionCall.bMute;
                txtCallStatus.innerHTML = bMute ? '<i>Mute the call...</i>' : '<i>Unmute the call...</i>';
                i_ret = oSipSessionCall.mute('audio'/*could be 'video'*/, bMute);
                if (i_ret != 0) {
                    txtCallStatus.innerHTML = '<i>Mute / Unmute failed</i>';
                    return;
                }
                oSipSessionCall.bMute = bMute;
                btnMute.value = bMute ? "Unmute" : "Mute";
            }
        }

        // terminates the call (SIP BYE or CANCEL)
        function sipHangUp() {
            if (oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Terminating the call...</i>';
                oSipSessionCall.hangup({ events_listener: { events: '*', listener: onSipEventSession } });
            }
        }

        function sipSendDTMF(c) {
            if (oSipSessionCall && c) {
                if (oSipSessionCall.dtmf(c) == 0) {
                    try { dtmfTone.play(); } catch (e) { }
                }
            } else {
				txtPhoneNumber.value = txtPhoneNumber.value + c;
			}
        }

        function startRingTone() {
            try { ringtone.play(); }
            catch (e) { }
        }

        function stopRingTone() {
            try { ringtone.pause(); }
            catch (e) { }
        }

        function startRingbackTone() {
            try { ringbacktone.play(); }
            catch (e) { }
        }

        function stopRingbackTone() {
            try { ringbacktone.pause(); }
            catch (e) { }
        }

        function showNotifICall(s_number) {
            // permission already asked when we registered
            if (window.webkitNotifications && window.webkitNotifications.checkPermission() == 0) {
                if (oNotifICall) {
                    oNotifICall.cancel();
                }
                oNotifICall = window.webkitNotifications.createNotification('/xvb/images/sipml-34x39.png', 'Incaming call', 'Incoming call from ' + s_number);
                oNotifICall.onclose = function () { oNotifICall = null; };
                oNotifICall.show();
            }
        }

        function onDivCallCtrlMouseMove(evt) {
            try { // IE: DOM not ready
                if (tsk_utils_have_stream()) {
                    btnCall.disabled = (!tsk_utils_have_stream() || !oSipSessionRegister || !oSipSessionRegister.is_connected());
                }
            }
            catch (e) { }
        }

	function uiOnConnectionEvent(b_connected, b_connecting) { // should be enum: connecting, connected, terminating, terminated
		btnRegister.disabled = b_connected || b_connecting;
		btnUnRegister.disabled = !b_connected && !b_connecting;
		if ( btnRegister.disabled ) {
			divRegOptions.style.opacity = 0;
		} else {
			divRegOptions.style.opacity = 1;
		}
		btnCall.disabled = !(b_connected && tsk_utils_have_webrtc() && tsk_utils_have_stream());
		btnHangUp.disabled = !oSipSessionCall;
	}

        function uiBtnCallSetText(s_text) {
            switch (s_text) {
                case "Call":
                    {
                        var bDisableCallBtnOptions = "true";
                        btnCall.value = btnCall.innerHTML = bDisableCallBtnOptions ? 'Call' : 'Call <span id="spanCaret" class="caret">';
                        btnCall.setAttribute("class", bDisableCallBtnOptions ? "btn btn-primary" : "btn btn-primary dropdown-toggle");
                        btnCall.onclick = bDisableCallBtnOptions ? function () { sipCall('call-audio'); } : null;
                        break;
                    }
                default:
                    {
                        btnCall.value = btnCall.innerHTML = s_text;
                        btnCall.setAttribute("class", "btn btn-primary");
                        btnCall.onclick = function () { sipCall('call-audio'); };
                        break;
                    }
            }
        }

        function uiCallTerminated(s_description) {
            uiBtnCallSetText("Call");
            btnHangUp.value = 'HangUp';
            btnHoldResume.value = 'Hold';
            btnMute.value = "Mute";
            btnCall.disabled = false;
            btnHangUp.disabled = true;
            if (window.btnBFCP) window.btnBFCP.disabled = true;

            oSipSessionCall = null;

            stopRingbackTone();
            stopRingTone();

            txtCallStatus.innerHTML = "<i>" + s_description + "</i>";

            if (oNotifICall) {
                oNotifICall.cancel();
                oNotifICall = null;
            }

            setTimeout(function () { if (!oSipSessionCall) txtCallStatus.innerHTML = ''; }, 2500);
			
			try { hangupTone.play(); } catch (e) { };
        }

        // Callback function for SIP Stacks
        function onSipEventStack(e /*SIPml.Stack.Event*/) {
            tsk_utils_log_info('==stack event = ' + e.type);
            switch (e.type) {
                case 'started':
                    {
                        // catch exception for IE (DOM not ready)
                        try {
                            // LogIn (REGISTER) as soon as the stack finish starting
                            oSipSessionRegister = this.newSession('register', {
                                expires: 7200,
                                events_listener: { events: '*', listener: onSipEventSession },
                                sip_caps: [
                                            //{ name: '+g.oma.sip-im', value: null },
                                            //{ name: '+sip.ice' }, // rfc5768: FIXME doesn't work with Polycom TelePresence
                                            { name: '+audio', value: null }
                                ]
                            });
                            oSipSessionRegister.register();
                        }
                        catch (e) {
                            txtRegStatus.value = txtRegStatus.innerHTML = "<b>1:" + e + "</b>";
                            btnRegister.disabled = false;
                        }
                        break;
                    }
                case 'stopping': case 'stopped': case 'failed_to_start': case 'failed_to_stop':
                    {
                        var bFailure = (e.type == 'failed_to_start') || (e.type == 'failed_to_stop');
                        oSipStack = null;
                        oSipSessionRegister = null;
                        oSipSessionCall = null;

                        uiOnConnectionEvent(false, false);

                        stopRingbackTone();
                        stopRingTone();

                        txtCallStatus.innerHTML = '';
                        txtRegStatus.innerHTML = bFailure ? "<i>Disconnected: <b>" + e.description + "</b></i>" : "<i>Disconnected</i>";
                        break;
                    }

                case 'i_new_call':
                    {
                        if (oSipSessionCall) {
                            // do not accept the incoming call if we're already 'in call'
                            var sRemoteNumber = (oSipSessionCall.getRemoteFriendlyName() || 'unknown');
                            e.newSession.hangup(); // comment this line for multi-line support
                        }
                        else {
                            oSipSessionCall = e.newSession;
                            // start listening for events
                            oSipSessionCall.setConfiguration(oConfigCall);

                            var sRemoteNumber = (oSipSessionCall.getRemoteFriendlyName() || 'unknown');
                            txtCallStatus.innerHTML = "<i>Incoming call from [<b>" + sRemoteNumber + "</b>]</i>";
							
							if ( uiAutoAnswer == 1 ) {
								btnHangUp.disabled = false;
								try { autoanswerTone.play(); } catch (e) { };
                				oSipSessionCall.accept(oConfigCall);
							} else {
								uiBtnCallSetText('Answer');
								btnHangUp.value = 'Reject';
								btnCall.disabled = false;
								btnHangUp.disabled = false;
								startRingTone();
							}
                            showNotifICall(sRemoteNumber);
                        }

			var cur_date = new Date();
			appendCallHistory(sRemoteNumber, "--> "+ sRemoteNumber +"     "+ cur_date.toLocaleString());

                        break;
                    }

                case 'm_permission_requested':
                    {
                        break;
                    }
                case 'm_permission_accepted':
                case 'm_permission_refused':
                    {
                        if (e.type == 'm_permission_refused') {
                            uiCallTerminated('Media stream permission denied');
                        }
                        break;
                    }

                case 'starting': default: break;
            }
        };

        // Callback function for SIP sessions (INVITE, REGISTER, MESSAGE...)
        function onSipEventSession(e /* SIPml.Session.Event */) {
            tsk_utils_log_info('==session event = ' + e.type);

            switch (e.type) {
                case 'connecting': case 'connected':
                    {
                        var bConnected = (e.type == 'connected');
                        if (e.session == oSipSessionRegister) {
                            uiOnConnectionEvent(bConnected, !bConnected);
                            txtRegStatus.innerHTML = "<i>" + e.description + "</i>";
                        }
                        else if (e.session == oSipSessionCall) {
                            btnHangUp.value = 'HangUp';
                            btnCall.disabled = true;
                            btnHangUp.disabled = false;
                            if (window.btnBFCP) window.btnBFCP.disabled = false;

                            if (bConnected) {
                                stopRingbackTone();
                                stopRingTone();

                                if (oNotifICall) {
                                    oNotifICall.cancel();
                                    oNotifICall = null;
                                }
                            }

                            txtCallStatus.innerHTML = "<i>" + e.description + "</i>";
                        }
                        break;
                    } // 'connecting' | 'connected'
                case 'terminating': case 'terminated':
                    {
                        if (e.session == oSipSessionRegister) {
                            uiOnConnectionEvent(false, false);

                            oSipSessionCall = null;
                            oSipSessionRegister = null;

                            txtRegStatus.innerHTML = "<i>" + e.description + "</i>";
                        }
                        else if (e.session == oSipSessionCall) {
                            uiCallTerminated(e.description);
                        }
                        break;
                    } // 'terminating' | 'terminated'

                case 'm_stream_video_local_added':
                case 'm_stream_video_local_removed':
                case 'm_stream_video_remote_added':
                case 'm_stream_video_remote_removed':
			{
                        break;
			}
                case 'm_stream_audio_local_added':
                case 'm_stream_audio_local_removed':
                case 'm_stream_audio_remote_added':
                case 'm_stream_audio_remote_removed':
                    {
                        break;
                    }

                case 'i_ect_new_call':
                    {
                        oSipSessionTransferCall = e.session;
                        break;
                    }

                case 'i_ao_request':
                    {
                        if (e.session == oSipSessionCall) {
                            var iSipResponseCode = e.getSipResponseCode();
                            if (iSipResponseCode == 180 || iSipResponseCode == 183) {
                                startRingbackTone();
                                txtCallStatus.innerHTML = '<i>Remote ringing...</i>';
                            }
                        }
                        break;
                    }

                case 'm_early_media':
                    {
                        if (e.session == oSipSessionCall) {
                            stopRingbackTone();
                            stopRingTone();
                            txtCallStatus.innerHTML = '<i>Early media started</i>';
                        }
                        break;
                    }

                case 'm_local_hold_ok':
                    {
                        if (e.session == oSipSessionCall) {
                            if (oSipSessionCall.bTransfering) {
                                oSipSessionCall.bTransfering = false;
                                // this.AVSession.TransferCall(this.transferUri);
                            }
                            btnHoldResume.value = 'Resume';
                            btnHoldResume.disabled = false;
                            txtCallStatus.innerHTML = '<i>Call placed on hold</i>';
                            oSipSessionCall.bHeld = true;
                        }
                        break;
                    }
                case 'm_local_hold_nok':
                    {
                        if (e.session == oSipSessionCall) {
                            oSipSessionCall.bTransfering = false;
                            btnHoldResume.value = 'Hold';
                            btnHoldResume.disabled = false;
                            txtCallStatus.innerHTML = '<i>Failed to place remote party on hold</i>';
                        }
                        break;
                    }
                case 'm_local_resume_ok':
                    {
                        if (e.session == oSipSessionCall) {
                            oSipSessionCall.bTransfering = false;
                            btnHoldResume.value = 'Hold';
                            btnHoldResume.disabled = false;
                            txtCallStatus.innerHTML = '<i>Call taken off hold</i>';
                            oSipSessionCall.bHeld = false;
                        }
                        break;
                    }
                case 'm_local_resume_nok':
                    {
                        if (e.session == oSipSessionCall) {
                            oSipSessionCall.bTransfering = false;
                            btnHoldResume.disabled = false;
                            txtCallStatus.innerHTML = '<i>Failed to unhold call</i>';
                        }
                        break;
                    }
                case 'm_remote_hold':
                    {
                        if (e.session == oSipSessionCall) {
                            txtCallStatus.innerHTML = '<i>Placed on hold by remote party</i>';
                        }
                        break;
                    }
                case 'm_remote_resume':
                    {
                        if (e.session == oSipSessionCall) {
                            txtCallStatus.innerHTML = '<i>Taken off hold by remote party</i>';
                        }
                        break;
                    }
                case 'm_bfcp_info':
                    {
                        if (e.session == oSipSessionCall) {
                            txtCallStatus.innerHTML = 'BFCP Info: <i>' + e.description + '</i>';
                        }
                        break;
                    }

                case 'o_ect_trying':
                    {
                        if (e.session == oSipSessionCall) {
                            txtCallStatus.innerHTML = '<i>Call transfer in progress...</i>';
                        }
                        break;
                    }
                case 'o_ect_accepted':
                    {
                        if (e.session == oSipSessionCall) {
                            txtCallStatus.innerHTML = '<i>Call transfer accepted</i>';
                        }
                        break;
                    }
                case 'o_ect_completed':
                case 'i_ect_completed':
                    {
                        if (e.session == oSipSessionCall) {
                            txtCallStatus.innerHTML = '<i>Call transfer completed</i>';
                            if (oSipSessionTransferCall) {
                                oSipSessionCall = oSipSessionTransferCall;
                            }
                            oSipSessionTransferCall = null;
                        }
                        break;
                    }
                case 'o_ect_failed':
                case 'i_ect_failed':
                    {
                        if (e.session == oSipSessionCall) {
                            txtCallStatus.innerHTML = '<i>Call transfer failed</i>';
                        }
                        break;
                    }
                case 'o_ect_notify':
                case 'i_ect_notify':
                    {
                        if (e.session == oSipSessionCall) {
                            txtCallStatus.innerHTML = "<i>Call Transfer: <b>" + e.getSipResponseCode() + " " + e.description + "</b></i>";
                            if (e.getSipResponseCode() >= 300) {
                                if (oSipSessionCall.bHeld) {
                                    oSipSessionCall.resume();
                                }
                            }
                        }
                        break;
                    }
                case 'i_ect_requested':
                    {
                        if (e.session == oSipSessionCall) {
                            var s_message = "Do you accept call transfer to [" + e.getTransferDestinationFriendlyName() + "]?";//FIXME
                            if (confirm(s_message)) {
                                txtCallStatus.innerHTML = "<i>Call transfer in progress...</i>";
                                oSipSessionCall.acceptTransfer();
                                break;
                            }
                            oSipSessionCall.rejectTransfer();
                        }
                        break;
                    }
            }
        }

    </script>
</head>


	[% UNLESS PHONE_ONLY %]
<body style="padding:10px 0px 0px 0px">
	[% ELSE %]
<body style="padding:0px 25% 0 25%">
	[% END %]

	<center style="padding:5px 0px 0px 0px">
	<table width="100%">
	[% UNLESS NOCONTROL %]
	<tr>
		<td align="right" nowrap="nowrap">
			<a href="?action=pp_start" target="_top" title="New window" onClick="webphone_win(); true"><span class='icon-copy fs3'></span></a>
			&nbsp;
			<a href="?action=pp_start" target="_top" title="Close phone"><span class="icon-cross fs1"></span></a>
			&nbsp;
		</td>
	</tr>
	[% END %]
	<tr>
		<td>
			<h3>&nbsp;Call control</h3>
		</td>
	</tr>
	<tr>
		<td align='center'>&nbsp;<label style="width: 100%;" align="center" id="txtCallStatus"></label></td>
	</tr>
	<tr>
		<td style="white-space:nowrap;">
			<span id='selector-select' style="position:absolute; visibility:hidden">
				<select name='history' id="call_history" onchange="
							txtPhoneNumber.value=this.value;
							call_history.selectedIndex = 0;
							document.getElementById('selector-select').style.visibility='hidden'; 
							document.getElementById('selector-text').style.visibility='visible';">
					<option value=''>--  call history --</option>
					<option value=''>-------------------</option>
				</select>
			</span>
			<span id='selector-text'>
			<input type="text" style="width: 92%; height:100%;" id="txtPhoneNumber" value="" placeholder="Enter phone number to call" />
			</span>
			<a href='#selector-select' class='l-info' onclick="
					document.getElementById('selector-text').style.visibility='hidden';
					document.getElementById('selector-select').style.visibility='visible';">
			<span class='fs1'>▾</span>
			</a>
		</td>
	</tr>
	<tr>
		<td align="right">
			<div class="btn-toolbar" style="margin: 0; vertical-align:middle">
				<div id="divBtnCallGroup" class="btn-group">
					<button id="btnCall" disabled class="btn btn-primary" data-toggle="dropdown">Call</button>
				</div>
				&nbsp;&nbsp;
				<div class="btn-group">
					<input type="button" id="btnHangUp" style="margin: 0; vertical-align:middle; height: 100%;" class="btn btn-primary" value="HangUp" onclick='sipHangUp();' disabled />
				</div>
				&nbsp;
			</div>
		</td>
	</tr>
	<tr>
		<td align='center'>
		<div id='divCallOptions' class='call-options' style='margin-top: 0px'>
		<table>
			<tr><td><input type="button" style="width: 33%" class="btn" value="1" onclick="sipSendDTMF('1');" /><input type="button" style="width: 33%" class="btn" value="2" onclick="sipSendDTMF('2');" /><input type="button" style="width: 33%" class="btn" value="3" onclick="sipSendDTMF('3');" /></td></tr>
			<tr><td><input type="button" style="width: 33%" class="btn" value="4" onclick="sipSendDTMF('4');" /><input type="button" style="width: 33%" class="btn" value="5" onclick="sipSendDTMF('5');" /><input type="button" style="width: 33%" class="btn" value="6" onclick="sipSendDTMF('6');" /></td></tr>
			<tr><td><input type="button" style="width: 33%" class="btn" value="7" onclick="sipSendDTMF('7');" /><input type="button" style="width: 33%" class="btn" value="8" onclick="sipSendDTMF('8');" /><input type="button" style="width: 33%" class="btn" value="9" onclick="sipSendDTMF('9');" /></td></tr>
			<tr><td><input type="button" style="width: 33%" class="btn" value="*" onclick="sipSendDTMF('*');" /><input type="button" style="width: 33%" class="btn" value="0" onclick="sipSendDTMF('0');" /><input type="button" style="width: 33%" class="btn" value="#" onclick="sipSendDTMF('#');" /></td></tr>
			<tr><td><input type="button" style="width: 33%" value="AutoAnsw" onclick="AutoAnswer();" class="btn btn-primary" id="btnAutoAnswer" /><input type="button" style="width: 33%" class="btn" id="btnMute" value="Mute" onclick='sipToggleMute();'  /><input type="button" style="width: 33%" class="btn" id="btnHoldResume" value="Hold" onclick='sipToggleHoldResume();'  /></td></tr>
		</table>
		</div>
		</td>
	</tr>
	<tr>
		<td>
			<h4>[% PHONE.callerid %]@[% WEBRTC.REALM | html %]</h4>
		</td>
	</tr>
	<tr>
		<td align='center'>
			<label align="center" id="txtRegStatus"><i>Disconnected</i></label>
		</td>
	</tr>
	<tr>
		<td align="right">
			<!-- FixMe -->
			<input type="hidden" id="txtDisplayName" value="[% PHONE.name %]" />
			<input type="hidden" id="txtPrivateIdentity" value="[% PHONE.name %]" />
			<input type="hidden" id="txtRealm" value="[% WEBRTC.REALM | html %]" />
			<input type="hidden" id="txtWebSocket" value="[% WEBRTC.WS | html %]" />
			<input type="hidden" id="txtICE" value='[% WEBRTC.ICE | html %]' />
			[% IF WEBRTC.UI_SKIP_PSWD %]
				<input type="hidden" id="txtPassword" value="[% PHONE.secret | html %]" />
				<div id='divRegOptions' class='call-options' style='opacity: 1; margin-top: 0px; height: 0px; width: 0px'></div>
			[% ELSE %]
				<div id='divRegOptions' class='call-options' style='opacity: 1; margin-top: 0px'>
					<input type="password" style="width: 100%; height:100%;" id="txtPassword" value="" placeholder="pasword here" />
				</div>
			[% END %]
		</td>
	</tr>
	<tr>
		<td align="right">
			<input type="button" class="btn btn-success" id="btnRegister" value="LogIn" disabled onclick='sipRegister();' />
			&nbsp;
			<input type="button" class="btn btn-danger" id="btnUnRegister" value="LogOut" disabled onclick='sipUnRegister();' />
			&nbsp;
		</td>
	</tr>
	</table>
	<br />
	</center>
	<!-- Audios -->
	<audio id="audio_remote" autoplay="autoplay"> </audio>
	<audio id="ringtone" loop src="/xvb/sounds/ringtone.wav"> </audio>
	<audio id="ringbacktone" loop src="/xvb/sounds/ringbacktone.wav"> </audio>
	<audio id="dtmfTone" src="/xvb/sounds/dtmf.wav"> </audio>
	<audio id="hangupTone" src="/xvb/sounds/hanguptone.wav"> </audio>
	<audio id="autoanswerTone" src="/xvb/sounds/autoanswertone.wav"> </audio>
</body>
</html>
