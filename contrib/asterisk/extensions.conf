;
; $Id: extensions.conf,v 1.237 2022/01/07 20:03:43 gosha Exp $
;
;--------------------------------------------------------------------
;[globals]
;
;#exec /opt/VirtualPBX/contrib/utils/xvb2astconf.pl

;--------------------------------------------------------------------
; agi setup
;
[macro-agi-setup]
exten => s,1,GotoIf($["${ENV(AGI_SERVER)}" = ""]?set_def)
exten => s,2,Set(AGI_SERVER=${ENV(AGI_SERVER)})
exten => s,10(set_def),Set(AGI_SERVER=127.0.0.1)


;--------------------------------------------------------------------
; agi run
;
[macro-agi-run]
exten => s,1,Agi(agi://${AGI_SERVER}/${ARG1}?${ARG2})
exten => s,n,GotoIf($["${AGISTATUS}" = "FAILURE"]?agi_failover)
exten => s,1000(agi_failover),Agi(/opt/VirtualPBX/contrib/utils/Fagi.pl,agi,,action=${ARG1}&${ARG2})
;
exten => h,1,GotoIf($["${ARG3}" = ""]?noop)
exten => h,n,Agi(agi://${AGI_SERVER}/${ARG3}?${ARG4})
exten => h,n,GotoIf($["${AGISTATUS}" = "FAILURE"]?hagi_failover:noop)
exten => h,1000(hagi_failover),Agi(/opt/VirtualPBX/contrib/utils/Fagi.pl,agi,,action=${ARG3}&${ARG4})
exten => h,n(noop),NoOp(agi-run-end)

;--------------------------------------------------------------------
; dialout dtmf
;
[macro-xvb-dialout-def-dtmf]
;
exten => s,1,Playback(void-2)
exten => s,n,SendDTMF(${ARG1})
exten => s,n,MacroExit

;--------------------------------------------------------------------
; dialout announcement
;
[macro-xvb-announcement]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
; FMC
exten => s,n(fmc),GotoIf($["${ARG5}" = "0"] ?dtmf)
exten => s,n,Set(SHARED(xvb-b-dialedpeernumber,${ORIG_CHANNEL})=${DIALEDPEERNUMBER})
;
; exten number
exten => s,n(dtmf),GotoIf($["${ARG4}" = "void"] ?callerid)
exten => s,n,Playback(void-2)
exten => s,n,SendDTMF(${ARG4})
;
; callerID
exten => s,n(callerid),GotoIf($[${ARG3} = 0] ?announcement)
exten => s,n,Wait(0.5)
exten => s,n,Playback(dialout-callerid)
exten => s,n,SayAlpha(${ORIG_CALLERID})
;
;announcement
exten => s,n(announcement),GotoIf($["${ARG1}" = "void"] ?callconfirm)
exten => s,n,Playback(${ARG1})
;
;call confirm
exten => s,n(callconfirm),GotoIf($[${ARG2} = 0] ?nothing)
exten => s,n,Set(AnnLoop=0)
exten => s,n(repeat-options),GotoIf($[${AnnLoop} > 2] ?call-noanswer)
exten => s,n,Read(ACCEPT-CALL,dialout-confirm,1)
;
exten => s,n,Set(AnnLoop=${MATH(${AnnLoop}+1,int)})
;
exten => s,n,GotoIf($["${ACCEPT-CALL}" = ""] ?repeat-options)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 0] ?call-accepted)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 7] ?call-declined)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 9] ?call-transfer)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 8] ?call-parking)
;
exten => s,n,Goto(s,repeat-options)
;
exten => s,n(call-accepted),Set(SHARED(xvb-a-call-${DIALEDPEERNUMBER},${ORIG_CHANNEL})=1)
exten => s,n,ExecIf($["${XVB_ON_ANSWER_MACRO}" != ""]?Macro(${XVB_ON_ANSWER_MACRO}))
exten => s,n,MacroExit
;
exten => s,n(call-declined),Set(MACRO_RESULT=BUSY)
exten => s,n,MacroExit
;
exten => s,n(call-transfer),Set(MACRO_RESULT=CONTINUE)
exten => s,n,Macro(xvb-call-transfer)
exten => s,n,MacroExit
;
exten => s,n(call-parking),Set(MACRO_RESULT=CONTINUE)
exten => s,n,Macro(xvb-call-parking)
exten => s,n,MacroExit
;
exten => s,n(call-noanswer),Set(MACRO_RESULT=CONTINUE)
exten => s,n,MacroExit
;
exten => s,n(nothing),ExecIf($["${XVB_ON_ANSWER_MACRO}" != ""]?Macro(${XVB_ON_ANSWER_MACRO}))
exten => s,n,MacroExit
;--------------------------------------------------------------------
; queue announcement
;
[macro-xvb-queue]
;
exten => s,1(main),Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Macro(agi-setup)
;
; On Call Answered URL
exten => s,n,GotoIf($["${ARG2}" = "0"] ?announcement)
exten => s,n,Macro(agi-run,call_answered_http_hook)
exten => s,n,GotoIf($["${XVB_CURL_URL}" = ""] ?announcement)
exten => s,n,Set(Q_CURL_RESULT=${CURL(${XVB_CURL_URL})})
;
exten => s,n(announcement),GotoIf($["${ARG1}" = ""] ?counters)
exten => s,n,Playback(${ARG1})
;
exten => s,n(counters),Macro(agi-run,memcache_var,var=sh-queue-call-${XVB_CALL_ID}&val=0&to=2)
;
exten => s,n,ExecIf($["${XVB_ON_ANSWER_MACRO}" != ""]?Macro(${XVB_ON_ANSWER_MACRO}))

;--------------------------------------------------------------------
;  smartdial macro
;
[macro-xvb-smartdial]
exten => s,1,Set(WHO_TERM=SRC)
exten => s,n,Set(SOFT_TERM=0)
exten => s,n,GotoIf($["${XVB_FMC1}" = ""]?wofmc)
;
exten => s,n,GotoIf($["${XVB_SIP_EXISTS}" = "1"]?localhook)
exten => s,n,Dial(${ARG1},${ARG2},g${ARG3}${XVB_FMC_MOH},${ARG4})
exten => s,n,Goto(result)
;
exten => s,n(wofmc),Dial(${ARG1},${ARG2},g${ARG3},${ARG4})
exten => s,n,Goto(result)
;
exten => s,n(localhook),Set(_SDparam1=${ARG1})
exten => s,n,Set(_SDparam3=${ARG3})
exten => s,n,Set(_SDparam4=${ARG4})
exten => s,n,Dial(Local/s@xvb-smartdial-local-hook/n,${ARG2},g${XVB_FMC_MOH})
;
exten => s,n(result),GotoIf($[${SOFT_TERM} = 1] ?end)
exten => s,n,Set(WHO_TERM=DST)
exten => s,n(end),NoOp(EndSmartDial)

;--------------------------------------------------------------------
; FMC-Transfer
;
[macro-xvb-fmc-transfer1]
exten => s,1,Set(__FMC_DST=${XVB_FMC1})
exten => s,n,Set(__FMC_TLIMIT=${XVB_FMCTLIMIT1})
exten => s,n,Set(__FMC_GW=${XVB_FMCGW1})
exten => s,n,GotoIF($["${XVB_FMC1:0:1}" != "*"]?fmc)
exten => s,n,Set(SHARED(xvb-transfer,${ORIG_CHANNEL})=${XVB_FMC1})
exten => s,n,Hangup()
exten => s,n(fmc),Macro(agi-setup)
exten => s,n,Macro(agi-run,fmc_transfer)

[macro-xvb-fmc-transfer2]
exten => s,1,Set(__FMC_DST=${XVB_FMC2})
exten => s,n,Set(__FMC_TLIMIT=${XVB_FMCTLIMIT2})
exten => s,n,Set(__FMC_GW=${XVB_FMCGW2})
exten => s,n,GotoIF($["${XVB_FMC2:0:1}" != "*"]?fmc)
exten => s,n,Set(SHARED(xvb-transfer,${ORIG_CHANNEL})=${XVB_FMC2})
exten => s,n,Hangup()
exten => s,n(fmc),Macro(agi-setup)
exten => s,n,Macro(agi-run,fmc_transfer)

[macro-xvb-fmc-transfer3]
exten => s,1,Set(__FMC_DST=${XVB_FMC3})
exten => s,n,Set(__FMC_TLIMIT=${XVB_FMCTLIMIT3})
exten => s,n,Set(__FMC_GW=${XVB_FMCGW3})
exten => s,n,GotoIF($["${XVB_FMC3:0:1}" != "*"]?fmc)
exten => s,n,Set(SHARED(xvb-transfer,${ORIG_CHANNEL})=${XVB_FMC3})
exten => s,n,Hangup()
exten => s,n(fmc),Macro(agi-setup)
exten => s,n,Macro(agi-run,fmc_transfer)

;--------------------------------------------------------------------
;  hangup
;
[macro-xvb-call-hangup]
exten => s,1,Set(SOFT_TERM=1)
exten => s,n,Hangup()

;--------------------------------------------------------------------
; call notes
; 
[macro-xvb-ac-notes]
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => s,n,Set(NOTE_RESULT=${SHARED(xvb-call-note,${ORIG_CHANNEL})})
exten => s,n,ExecIf($["${NOTE_RESULT}" = ""]?Read(NOTE_RESULT,queues-note,,,,10))
exten => s,n,ExecIf($["${NOTE_RESULT}" = ""]?Set(NOTE_RESULT=#))
exten => s,n,Set(SHARED(xvb-call-note,${ORIG_CHANNEL})=${NOTE_RESULT})

;--------------------------------------------------------------------
;  transfer macro
;
[macro-xvb-call-transfer]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Set(AnnLoop=0)
exten => s,n(loop),GotoIf($[${AnnLoop} > 10] ?end)
exten => s,n,Read(EXT_NUM,pbx-transfer)
exten => s,n,Set(AnnLoop=${MATH(${AnnLoop}+1,int)})
exten => s,n,GotoIf($["${EXT_NUM}" = ""]?loop)
exten => s,n,GotoIf($["${EXT_NUM}" = "*"]?end)
exten => s,n,Set(SHARED(xvb-transfer,${ORIG_CHANNEL})=${EXT_NUM})
exten => s,n,Hangup()
exten => s,100(end),NoOp(fake-tranfer)

;--------------------------------------------------------------------
; onetouch transfer macro
;
[macro-xvb-onetouch-transfer]
exten => s,1,Set(SHARED(xvb-transfer,${ORIG_CHANNEL})=transfer)
exten => s,n,Hangup()

;--------------------------------------------------------------------
; conf3call
;
[macro-xvb-conf4call]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Set(AnnLoop=0)
exten => s,n(loop),GotoIf($[${AnnLoop} > 10] ?end)
exten => s,n,Read(EXT_NUM,pbx-conf4call)
exten => s,n,Set(AnnLoop=${MATH(${AnnLoop}+1,int)})
exten => s,n,GotoIf($["${EXT_NUM}" = ""]?loop)
exten => s,n,GotoIf($["${EXT_NUM}" = "*"]?end)
exten => s,n,Macro(agi-run,conf4call,num=${EXT_NUM})
exten => s,100(end),NoOp(fake-conf)

;--------------------------------------------------------------------
;  parking macro
;
[macro-xvb-call-parking]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,GotoIf($["${EXT_NUM}" != ""]?preset)
exten => s,n,Set(AnnLoop=0)
exten => s,n(loop),GotoIf($[${AnnLoop} > 10] ?end)
exten => s,n,Read(EXT_NUM,parking-announce)
exten => s,n,Set(AnnLoop=${MATH(${AnnLoop}+1,int)})
exten => s,n,GotoIf($["${EXT_NUM}" = ""]?loop)
exten => s,n(preset),Set(SHARED(xvb-transfer,${ORIG_CHANNEL})=*${EXT_NUM})
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,memcache_counter,mode=incr&var=parking-counter&max=9900)
exten => s,n,GotoIf($["${MEMCACHE_RESULT}" != ""]?ok)
exten => s,n,Set(MEMCACHE_RESULT=${EPOCH}${RAND(100,999)})
exten => s,n(ok),Set(SHARED(xvb-parking-slot,${ORIG_CHANNEL})=${MEMCACHE_RESULT})
exten => s,n,Playback(parking-slot-is)
exten => s,n,SayDigits(${MEMCACHE_RESULT})
exten => s,n,Hangup()
exten => s,100(end),NoOp(fake-parking)

;--------------------------------------------------------------------
; on touch recording
;
[macro-xvb-call-record]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,GotoIf($["${RECORDED_FILE}" != ""]?recok)
exten => s,n,Playback(extension-locked-msg-limit)
exten => s,n,GoTo(end)
;
exten => s,n(recok),GotoIf($["${RECORDED_FILE:-4}" = ".wav"]?smonitor)
;
; MixMonitor
exten => s,n,GotoIf($[${MONITOR_STATUS} = 0] ?start-mmon)
exten => s,n,GotoIf($[${MONITOR_STATUS} = 1] ?unpause-mmon)
exten => s,n,GotoIf($[${MONITOR_STATUS} = 2] ?pause-mmon)

exten => s,100(start-mmon),MixMonitor(${RECORDED_FILE})
exten => s,n,Set(MONITOR_STATUS=2)
exten => s,n,Playback(dialout-record-start)
exten => s,n,GoTo(end)
;
exten => s,110(unpause-mmon),MixMonitor(${RECORDED_FILE},a)
exten => s,n,Set(MONITOR_STATUS=2)
exten => s,n,Playback(dialout-record-start)
exten => s,n,GoTo(end)
;
exten => s,120(pause-mmon),StopMixMonitor
exten => s,n,Set(MONITOR_STATUS=1)
exten => s,n,Playback(dialout-record-stop)
exten => s,n,GoTo(end)
;
; Monitor Stereo
exten => s,200(smonitor),GotoIf($["${GLOBAL(PBX_STEREO_MONITOR)}" = "mixmonitor"]?smixmonitor)
exten => s,n,GotoIf($[${MONITOR_STATUS} = 0] ?start-mon)
exten => s,n,GotoIf($[${MONITOR_STATUS} = 1] ?end)
; always on
exten => s,n,GotoIf($[${MONITOR_STATUS} = 2] ?end)
;exten => s,n,GotoIf($[${MONITOR_STATUS} = 2] ?pause-mon)

exten => s,210(start-mon),Monitor(wav,${RECORDED_FILE:0:-4})
exten => s,n,Set(MONITOR_STATUS=2)
exten => s,n,Playback(dialout-record-start)
exten => s,n,GoTo(end)
;
exten => s,220(pause-mon),StopMonitor
exten => s,n,Set(MONITOR_STATUS=1)
exten => s,n,Playback(dialout-record-stop)
exten => s,n,GoTo(end)
;
; MixMonitor Stereo
exten => s,300(smixmonitor),GotoIf($[${MONITOR_STATUS} = 0] ?start-smmon)
exten => s,n,GotoIf($[${MONITOR_STATUS} = 1] ?unpause-smmon)
exten => s,n,GotoIf($[${MONITOR_STATUS} = 2] ?pause-smmon)

exten => s,310(start-smmon),MixMonitor(,r(${CB_RECORDED_FILE:0:-4}-in.wav)t(${CB_RECORDED_FILE:0:-4}-out.wav)S)
exten => s,n,Set(MONITOR_STATUS=2)
exten => s,n,Playback(dialout-record-start)
exten => s,n,GoTo(end)
;
exten => s,320(unpause-smmon),MixMonitor(,r(${CB_RECORDED_FILE:0:-4}-in.wav)t(${CB_RECORDED_FILE:0:-4}-out.wav)Sa)
exten => s,n,Set(MONITOR_STATUS=2)
exten => s,n,Playback(dialout-record-start)
exten => s,n,GoTo(end)
;
exten => s,330(pause-smmon),StopMixMonitor
exten => s,n,Set(MONITOR_STATUS=1)
exten => s,n,Playback(dialout-record-stop)
exten => s,n,GoTo(end)
;
exten => s,500(end),NoOp(MonExit)

;--------------------------------------------------------------------
; black-list
;
[macro-xvb-black-list]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,black_list)
exten => s,n,Playback(beep)

;--------------------------------------------------------------------
; black-list-global
;
[macro-xvb-black-list-global]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,black_list,mode=1)
exten => s,n,Playback(beep)

;--------------------------------------------------------------------
; bg-music MOH
;
[macro-xvb-bg-music-moh]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(KEY,beep,2,,,2)
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,bg_music,file_ind=${KEY}&is_moh=1)

;--------------------------------------------------------------------
; bg-music PLAY
;
[macro-xvb-bg-music-play]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(KEY,beep,2,,,2)
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,bg_music,file_ind=${KEY}&is_moh=0)
;--------------------------------------------------------------------
; bg-music custom files
;
[macro-xvb-bg-music-custom]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(KEY,beep,2,,,2)
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,bg_music,file_ind=${KEY}&is_moh=0&is_uf=1)

;--------------------------------------------------------------------
; bg-music call announce
;
[macro-xvb-bg-announce]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,bg_music,file_ind=${ARG1}&is_moh=0&is_uf=1)

;--------------------------------------------------------------------
; PITCH Change
;
[macro-xvb-pitch]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(PITCH,beep,3,,,2)
exten => s,n,GotoIf($["${PITCH}" = ""]?nodata)
exten => s,n,Set(PITCH_SHIFT(rx)=${PITCH:0:1}.${PITCH:1:2})
exten => s,n(nodata),NoOp(exit pitch)

;--------------------------------------------------------------------
; CRM Proxy
;
[macro-xvb-crm-proxy]
;
exten => s,1,Macro(agi-setup)
exten => s,n,Set(XVB_ANSWERED_URL=${XVB_ON_ANSWER_MACRO_URL})
exten => s,n,GotoIf($["${ON_ANSWER_MACRO_METHOD}" = "GET"]?get)
exten => s,n,Macro(agi-run,call_answered_http_hook,no_track=yes&method=POST&data_var=XVB_CRM_POST_DATA)
exten => s,n,Goto(end)
exten => s,n(get),Macro(agi-run,call_answered_http_hook,no_track=yes&method=GET)
exten => s,n(end),MacroExit

;--------------------------------------------------------------------
; AGI
;
[xvb-main]
exten => _X.,1,Set(__ORIG_CALLERID=${CALLERID(num)})
exten => _X.,n,Set(__ORIG_CALLEDID=${EXTEN})
exten => _X.,n,Set(__ORIG_RDNIS=${CALLERID(RDNIS)})
exten => _X.,n,Set(__ORIG_CHANNEL=${CHANNEL})
exten => _X.,n,Set(__TRANSFER_CONTEXT=xvb-call-at-transfer)
exten => _X.,n,Set(CHANNEL(language)=${GLOBAL(PBX_DEFAULT_LANG)})
exten => _X.,n,Goto(xvb)
;
#include "/etc/asterisk/xvb/xvb-pre-agi.conf"
;
; perl worker ( fork for each call )
exten => _X.,1000(xvb),GotoIf($["${GLOBAL(PBX_AGI_MODE)}" != "perl-worker"]?std_agi)
exten => _X.,n,Agi(agi://127.0.0.1:4574/show-must-go-on)
exten => _X.,n,GotoIf($["${AGISTATUS}" != "FAILURE"]?end_agi)
; standard agi
exten => _X.,n(std_agi),AGI(/opt/VirtualPBX/agi-bin/VirtualPBX.agi)
; post agi playback
exten => _X.,n(end_agi),GotoIf($["${POST_PLAYBACK}" = ""]?play_goodbye)
exten => _X.,n,ExecIf($["${IS_TOLLFREE_DID}" != ""]?Set(POST_PLAYBACK_OPT=skip))
exten => _X.,n,GotoIf($["${POST_PLAYBACK}" != "busy-tones"]?notbusy)
exten => _X.,n,Busy(30)
exten => _X.,n,Goto(post_agi)
exten => _X.,n(notbusy),Playback(${POST_PLAYBACK},${POST_PLAYBACK_OPT})
; post_playback
exten => _X.,n(play_goodbye),GotoIf($["${POST_PLAYBACK_GOODBYE}" = ""]?play_goodbye_std)
exten => _X.,n,Playback(${POST_PLAYBACK_GOODBYE},skip)
exten => _X.,n,Wait(${GLOBAL(PBX_HANGUP_DELAY)})
exten => _X.,n,Goto(post_agi)
exten => _X.,n(play_goodbye_std),GotoIf($["${GLOBAL(PBX_SKIP_GOODBYE)}" = "yes"]?post_delay)
exten => _X.,n,Playback(goodbye,skip)
exten => _X.,n(post_delay),Wait(${GLOBAL(PBX_HANGUP_DELAY)})
exten => _X.,n,Goto(post_agi)
;
#include "/etc/asterisk/xvb/xvb-post-agi.conf"

;--------------------------------------------------------------------
; FastAGI auth
;
[xvb-main-fagi]
; DIDs
exten => _DIDX.,1,Goto(${EXTEN:3},1)
;
exten => _X.,1,Set(__ORIG_CALLERID=${CALLERID(num)})
exten => _X.,n,Set(__ORIG_CALLEDID=${CUT(EXTEN,\;,1)});
exten => _X.,n,Set(CDR_TIME=${EPOCH})
exten => _X.,n,Set(CDR_DID=${EXTEN})
;
exten => _X.,n,Macro(agi-setup)
;
exten => _X.,n,Set(LOCAL_ID=${GLOBAL(PBX_LOCAL_NODE_ID)})
exten => _X.,n,Set(CHANNEL(language)=${GLOBAL(PBX_DEFAULT_LANG)})
;
; default values
exten => _X.,n,Set(SERVER_ID=${LOCAL_ID})
exten => _X.,n,Set(XVB_LOGIN_STATUS=3)
;
; DID numbers
exten => _X.,n,Macro(agi-run,check_ac,did=${EXTEN})
exten => _X.,n,Set(AUTH_STR=${EXTEN})
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 1] ?start)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 2] ?lock)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 3] ?error)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 4] ?limits)
;
; auth by ac
exten => _X.,n,Set(Loop=0)
exten => _X.,n,Answer()
exten => _X.,n(loop),GotoIf($[${Loop} > 3] ?stop)
exten => _X.,n,Read(ACCESS_CODE,input-access_code)
exten => _X.,n,Set(Loop=${MATH(${Loop}+1,int)})
exten => _X.,n,Macro(agi-run,check_ac,ac=${ACCESS_CODE}&pn=${EXTEN})
exten => _X.,n,Set(AUTH_STR=${EXTEN}*${ACCESS_CODE})
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 1] ?start)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 2] ?lock)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 3] ?error)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 4] ?limits)
exten => _X.,n,Playback(invalid-access_code)
exten => _X.,n,Goto(loop)
;
; Fagi Error
exten => _X.,n(error),Answer()
exten => _X.,n,Playback(service-unavail)
exten => _X.,n,Hangup()
;
; max attempts
exten => _X.,n(stop),Playback(exceeded-attempts)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
; ac lock
exten => _X.,n(lock),Answer()
exten => _X.,n,Playback(service-locked)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
; customer call limit
exten => _X.,n(limits),Answer()
exten => _X.,n,Playback(call-limits-in)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
exten => _X.,n(start),GotoIf($["${SERVER_ID}" = "${LOCAL_ID}"] ?local-handler)
;
; remote server ( from sip peers with can-reinvite = yes )
exten => _X.,n,Transfer(SIP/${AUTH_STR}@${NODE_IP})
exten => _X.,n,Hangup()
;
; local user
exten => _X.,n(local-handler),Answer()
exten => _X.,n,Background(please-wait)
exten => _X.,n,Set(CDR_TIME=0)
exten => _X.,n,Goto(xvb-main,${AUTH_STR},1)

exten => h,1,GotoIf($[${CDR_TIME} > 0]?10)
exten => h,10,Macro(agi-run,log_unknown_call,c=c)

;--------------------------------------------------------------------
;callback
;
[xvb-callback]
exten => _X.,1,Set(CALL_TYPE=callback)
exten => _X.,n,Goto(xvb-main,${EXTEN},1)
;
exten => h,1,GotoIf($["${NOCDR}" = "yes"] ?nocdr)
exten => h,n,Macro(agi-setup)
exten => h,n,Macro(agi-run,callback_status,ct=Callback)
exten => h,n(nocdr),NoOp(Call End)
;
exten => failed,1,Macro(agi-setup)
exten => failed,n,Set(NOCDR=yes)
exten => failed,n,Macro(agi-run,callback_status,ct=Callback)


;--------------------------------------------------------------------
; alarmclock handler
;
[xvb-alarmclock-handler]
exten => s,1,Set(FE=${STAT(e,${XVB_PLAYBACK_FILE})})
exten => s,n,GotoIf($["${FE}" = "0"] ?stop)
;
exten => s,n,Macro(agi-setup)
exten => s,n,Set(CB_PH_INDEX=1)
exten => s,n,Set(CB_PH_COUNT=${MATH(${CB_PH_COUNT}+0,int)})
exten => s,n(loop),Set(CB_PN=${CUT(CB_CALL_STR,&,${CB_PH_INDEX})})
exten => s,n,GotoIf($["${CB_PN}" = ""] ?stop)
exten => s,n,Set(XVB_PN=${CUT(CB_XVB_PN,&,${CB_PH_INDEX})})
exten => s,n,GotoIf($["${GLOBAL(PBX_STRIP_LOCALCHAN)}" != "yes"]?skipcache)
exten => s,n,Macro(agi-run,memcache_var,var=xvb-pn-${CB_CALL_ID}&val=${XVB_PN}&to=600)
exten => s,n(skipcache),Set(XVB_CUR_CID=${CUT(CB_XVB_DEFCID,&,${CB_PH_INDEX})})
exten => s,n,Set(CALLERID(num)=${XVB_CUR_CID})
exten => s,n,Dial(${CB_PN},${CB_TO},g)
exten => s,n,GotoIf($["${DIALSTATUS}" = "ANSWER"] ?stop)
exten => s,n,Set(CB_PH_INDEX=${MATH(${CB_PH_INDEX}+1,int)})
exten => s,n,Macro(agi-run,callback_status,ct=AlarmClock)
exten => s,n,GotoIf($[${CB_PH_INDEX} <= ${CB_PH_COUNT}] ?loop)
exten => s,n(stop),NoOp(AlarmClockEnd)
exten => s,n,Hangup(${HANGUPCAUSE})

[xvb-alarmclock]
exten => _X.,1,Set(CALL_TYPE=alarmclock)
exten => _X.,n,Goto(xvb-main,${EXTEN},1)

;--------------------------------------------------------------------
; click2call handler
;
[xvb-click2call]
exten => _X.,1,Set(CALL_TYPE=click2call)
exten => _X.,n,Goto(xvb-main,${EXTEN},1)
;
exten => h,1,GotoIf($["${NOCDR}" = "yes"] ?nocdr)
exten => h,n,Macro(agi-setup)
exten => h,n,Macro(agi-run,callback_status,ct=Click2Call)
exten => h,n(nocdr),NoOp(Call End)
;
exten => failed,1,Macro(agi-setup)
exten => failed,n,Set(NOCDR=yes)
exten => failed,n,Macro(agi-run,callback_status,ct=Click2Call)

;--------------------------------------------------------------------
; callblast handler
;
[xvb-callblast]
exten => _X.,1,Set(CALL_TYPE=callblast)
exten => _X.,n,GotoIf($["${CB_RECORDED_FILE}" = ""] ?startcb)
exten => _X.,n,GotoIf($["${CB_RECORDED_FILE:-8}" = "-mon.wav"]?smonitor)
exten => _X.,n,GotoIf($["${CB_RECORDED_FILE:-8}" = "-mix.wav"]?smixmonitor)
;
exten => _X.,n,MixMonitor(${CB_RECORDED_FILE})
exten => _X.,n,Goto(startcb)
;
exten => _X.,n(smonitor),Monitor(wav,${CB_RECORDED_FILE:0:-4})
exten => _X.,n,Goto(startcb)
;
exten => _X.,n(smixmonitor),MixMonitor(,r(${CB_RECORDED_FILE:0:-4}-in.wav)t(${CB_RECORDED_FILE:0:-4}-out.wav)S)
exten => _X.,n,Goto(startcb)
;
exten => _X.,n(startcb),Macro(agi-setup)
exten => _X.,n,GotoIf($["${CB_SKIP_AMD}" = "yes"] ?setstat)
exten => _X.,n,AMD(4500,2000,500,7200)
exten => _X.,n,Set(MACHINE_DETECT=${AMDSTATUS})
exten => _X.,n,GotoIf($["${CB_AMD_HANGUP}" = ""] ?setstat)
exten => _X.,n,GotoIf($["${AMDSTATUS}" = "HUMAN"] ?setstat)
exten => _X.,n,Goto(machine,1)
exten => _X.,n(setstat),Macro(agi-run,callblast_status,status=success&data_id=${CB_DATA_ID})
exten => _X.,n,Goto(xvb-main,${EXTEN},1)
;
exten => h,1,GotoIf($["${NOCDR}" = "yes"] ?nocdr)
exten => h,n,Macro(agi-setup)
exten => h,n,Macro(agi-run,callblast_status,status=failed&data_id=${CB_DATA_ID}&status_str=HUNGUP)
exten => h,n(nocdr),NoOp(Call End)
;
exten => failed,1,GotoIf($["${XVB_PN}" = ""] ?nocdr)
exten => failed,n,Macro(agi-setup)
exten => failed,n,Macro(agi-run,callblast_status,status=failed&data_id=${CB_DATA_ID})
exten => failed,n(nocdr),Set(NOCDR=yes)
;
exten => machine,1,GotoIf($["${XVB_PN}" = ""] ?nocdr)
exten => machine,n,Macro(agi-setup)
exten => machine,n,Macro(agi-run,callblast_status,status=failed&status_str=AMDHUNGUP&data_id=${CB_DATA_ID})
exten => machine,n(nocdr),Set(NOCDR=yes)

;--------------------------------------------------------------------
; callblast multidial context
;
[xvb-callblast-multidial]
exten => s,1,Set(CB_PH_INDEX=1)
exten => s,n,Macro(agi-setup)
exten => s,n,Set(CB_PH_COUNT=${MATH(${CB_PH_COUNT}+0,int)})
exten => s,n(loop),Set(CB_PN=${CUT(CB_CALL_STR,&,${CB_PH_INDEX})})
exten => s,n,GotoIf($["${CB_PN}" = ""] ?stop)
exten => s,n,Set(XVB_PN=${CUT(CB_XVB_PN,&,${CB_PH_INDEX})})
exten => s,n,GotoIf($["${GLOBAL(PBX_STRIP_LOCALCHAN)}" != "yes"]?skipcache)
exten => s,n,Macro(agi-run,memcache_var,var=xvb-pn-${CB_CALL_ID}&val=${XVB_PN}&to=600)
exten => s,n(skipcache),Set(XVB_CUR_CID=${CUT(CB_XVB_DEFCID,&,${CB_PH_INDEX})})
exten => s,n,Set(CALLERID(num)=${XVB_CUR_CID})
exten => s,n,Dial(${CB_PN},${CB_TO},g)
exten => s,n,GotoIf($["${DIALSTATUS}" = "ANSWER"] ?enddial)
exten => s,n,Set(CB_PH_INDEX=${MATH(${CB_PH_INDEX}+1,int)})
exten => s,n,GotoIf($[${CB_PH_INDEX} > ${CB_PH_COUNT}] ?stop)
exten => s,n,Macro(agi-run,callblast_status,status=failed&data_id=${CB_DATA_ID}&cdronly=1&status_str=${DIALSTATUS})
exten => s,n,GotoIf($[${CB_PH_INDEX} <= ${CB_PH_COUNT}] ?loop)
exten => s,n(stop),Macro(agi-run,callblast_status,status=failed&data_id=${CB_DATA_ID}&status_str=${DIALSTATUS})
exten => s,n,Hangup(${HANGUPCAUSE})
exten => s,n(enddial),GotoIf($["${CB_WAIT_NOTES}" != "yes"] ?endcall)
exten => s,n,Set(CHANNEL(language)=${CB_LANG})
exten => s,n,Read(NOTE_RESULT,callblast-note,,,,10)
exten => s,n,ExecIf($["${NOTE_RESULT}" != ""]?Macro(agi-run,callblast_notes,data_id=${CB_DATA_ID}&note=${NOTE_RESULT}))
exten => s,n(endcall),Hangup(${HANGUPCAUSE})

;--------------------------------------------------------------------
; phones
;
[xvb-phones]
;
#include "/etc/asterisk/xvb/xvb-phone-filters.conf"
;
; ivr / service | +e164
exten => _[+*].,1,Set(CALLED_NUMBER=${REPLACE(EXTEN,\,,)})
exten => _[+*].,n,Goto(00${CALLED_NUMBER},digits)
;
; BLF
exten => _BLF*X.,1,Set(CALLED_NUMBER=${EXTEN:4})
exten => _BLF*X.,n,Set(CALLED_NUMBER=${CUT(CALLED_NUMBER,*,1)})
exten => _BLF*X.,n,Goto(${CALLED_NUMBER},digits)
;
; short digits ( 0 - 9 )
exten => _X,1,Set(CALLED_NUMBER=${EXTEN})
exten => _X,n,Goto(00${EXTEN},digits)
;
; digits
exten => _X.,1,Set(CALLED_NUMBER=${EXTEN})
exten => _X.,n,Goto(digits)
;exten => _X.,n,Set(AUDIOHOOK_INHERIT(MixMonitor)=yes)
exten => _X.,1000(digits),ExecIf($["${CALLED_NUMBER}" = ""]?Set(CALLED_NUMBER=${EXTEN}))
exten => _X.,n,Macro(agi-setup)
exten => _X.,n,Set(__TRANSFER_CONTEXT=xvb-call-at-transfer)
exten => _X.,n,Set(__ORIG_CHANNEL=${CHANNEL})
exten => _X.,n,Set(__ORIG_CALLERID=${CALLERID(num)})
exten => _X.,n,Set(__ORIG_CALLEDID=${CALLED_NUMBER})
exten => _X.,n,Set(__XVB_IS_U_PHONE=1)
exten => _X.,n(agi),Macro(agi-run,local_call,mode=start)
;
; check route result
exten => _X.,n,Set(WHO_TERM=SRC)
exten => _X.,n,GotoIf($["${ROUTE}" = "1"]?local_chan)
exten => _X.,n,GotoIf($["${ROUTE}" = "2"]?sip_chan)
exten => _X.,n,GotoIf($["${ROUTE}" = "3"]?phone_chan)
exten => _X.,n,GotoIf($["${ROUTE}" = "4"]?ivr)
exten => _X.,n,GotoIf($["${ROUTE}" = "5"]?service)
exten => _X.,n,GotoIf($["${ROUTE}" = "6"]?phone_chan)
exten => _X.,n,Set(WHO_TERM=PBX)
exten => _X.,n,Hangup
; local
exten => _X.,n(local_chan),Dial(LOCAL/${PHONE}@${PEER}/n,${GLOBAL(PBX_TIMEOUT_DIALOUT)},g${XVB_CALL_OPTIONS})
exten => _X.,n,Set(WHO_TERM=DST)
exten => _X.,n,Goto(call_status)
exten => _X.,n,Hangup
; sip routes
exten => _X.,n(sip_chan),GotoIf($["${ROUTE_CNT}" = ""]?sip_chan_single)
; multi-route
exten => _X.,n,Set(Loop=1)
exten => _X.,n(loop),Set(PEER=${PEER${Loop}})
exten => _X.,n,Set(PHONE=${PHONE${Loop}})
exten => _X.,n,Set(DEFCID=${DEFCID${Loop}})
exten => _X.,n,Set(CALLMODE=${CALLMODE${Loop}})
;
exten => _X.,n,ExecIf($["${DEFCID}" != ""]?Set(CALLERID(num)=${DEFCID}))
exten => _X.,n,GotoIf($["${CALLMODE${Loop}}" = "local"]?multi_local_chan)
exten => _X.,n,GotoIf($["${TLIMIT${Loop}}" = "0"]?sip_chan_wo_limit)
;
exten => _X.,n,Dial(SIP/${PEER}/${PHONE},${GLOBAL(PBX_TIMEOUT_DIALOUT)},giS(${TLIMIT${Loop}})${XVB_CALL_OPTIONS})
exten => _X.,n,Goto(loop_inc)
;
exten => _X.,n(sip_chan_wo_limit),Dial(SIP/${PEER}/${PHONE},${GLOBAL(PBX_TIMEOUT_DIALOUT)},gi${XVB_CALL_OPTIONS})
exten => _X.,n,Goto(loop_inc)
;
exten => _X.,n(multi_local_chan),Dial(LOCAL/${PHONE}@${PEER}/n,${GLOBAL(PBX_TIMEOUT_DIALOUT)},g${XVB_CALL_OPTIONS})
;
exten => _X.,n(loop_inc),Set(Loop=$[${Loop} + 1])
exten => _X.,n,GotoIf($["${DIALSTATUS}" = "ANSWER"]?sip_chan_status)
exten => _X.,n,GotoIf($["${DIALSTATUS}" = "NOANSWER"]?sip_chan_status)
exten => _X.,n,GotoIf($["${DIALSTATUS}" = "CANCEL"]?sip_chan_status)
exten => _X.,n,GotoIf($[${Loop} > ${ROUTE_CNT}] ?sip_chan_status)
exten => _X.,n,Goto(loop)
; sip-single-route
exten => _X.,n(sip_chan_single),ExecIf($["${DEFCID}" != ""]?Set(CALLERID(num)=${DEFCID}))
exten => _X.,n,GotoIf($["${TLIMIT}" = "0"]?sip_chan_single_wo_limit)
exten => _X.,n,Dial(SIP/${PEER}/${PHONE},${GLOBAL(PBX_TIMEOUT_DIALOUT)},giS(${TLIMIT})${XVB_CALL_OPTIONS})
exten => _X.,n,Goto(sip_chan_status)
exten => _X.,n(sip_chan_single_wo_limit),Dial(SIP/${PEER}/${PHONE},${GLOBAL(PBX_TIMEOUT_DIALOUT)},gi${XVB_CALL_OPTIONS})
;
exten => _X.,n(sip_chan_status),Set(WHO_TERM=DST)
exten => _X.,n,Goto(call_status)
exten => _X.,n,Hangup
; phones
exten => _X.,n(phone_chan),NoOp(Phone Call start)
exten => _X.,n,Set(SHARED(xvb-transfer)=null)
exten => _X.,n,ExecIf($["${XVB_RING_TIMEOUT}" = ""]?Set(RING_TIMEOUT=${GLOBAL(PBX_TIMEOUT_DIALOUT)}))
exten => _X.,n,ExecIf($["${ROUTE}" = "3"]?Dial(SIP/${PEER},${XVB_RING_TIMEOUT},gi${XVB_CALL_OPTIONS})
exten => _X.,n,ExecIf($["${ROUTE}" = "6"]?Dial(SIP/${PEER}/${PHONE},${XVB_RING_TIMEOUT},gi${XVB_CALL_OPTIONS})
exten => _X.,n,Set(WHO_TERM=DST)
exten => _X.,n,GotoIf($["${SHARED(xvb-transfer)}" = "null"]?check_fwd)
exten => _X.,n,Macro(agi-run,local_call,mode=stop)
exten => _X.,n,Set(XVB_TRANSFER_FROM=${CALLED_NUMBER})
exten => _X.,n,Goto(xvb-phones,${SHARED(xvb-transfer)},1)
exten => _X.,n(check_fwd),GotoIf($["${XVB_FWD_NUM}" = ""]?call_status)
exten => _X.,n,GotoIf($["${DIALSTATUS}" = "CANCEL"]?call_status)
exten => _X.,n,GotoIf($["${DIALSTATUS}" = "ANSWER"]?call_status)
exten => _X.,n,GotoIf($["${DIALSTATUS}" = "BUSY"]?call_status)
exten => _X.,n,Macro(agi-run,local_call,mode=stop)
exten => _X.,n,Goto(xvb-phones,${XVB_FWD_NUM},1)
; channel status
exten => _X.,n(call_status),NoOp(Phone Call Complete)
exten => _X.,n,GotoIf($["${XVB_REDIALER_SERVICE}" = "yes"]?xvb-phone-services,**3,1000)
exten => _X.,n,GotoIf($["${XVB_TRANSFER_FROM}" = ""]?sip_chan_term)
exten => _X.,n,GotoIf($["${DIALSTATUS}" = "CANCEL"]?sip_chan_term)
exten => _X.,n,GotoIf($["${DIALSTATUS}" = "ANSWER"]?sip_chan_term)
exten => _X.,n,Set(PREV_NUMBER=${XVB_TRANSFER_FROM})
exten => _X.,n,Set(XVB_TRANSFER_FROM=)
exten => _X.,n,Macro(agi-run,local_call,mode=stop)
exten => _X.,n,Goto(xvb-phones,${PREV_NUMBER},1)
exten => _X.,n(sip_chan_term),Hangup
; IVR
exten => _X.,n(ivr),Set(CALL_TYPE=local)
exten => _X.,n,Goto(xvb-main,${PHONE},1)
exten => _X.,n,Hangup
; services
exten => _X.,n(service),Answer
exten => _X.,n,Goto(xvb-phone-services,${PHONE},1)
exten => _X.,n,Hangup
;
; Write CDR
exten => h,1,GotoIf($["${ROUTE}" != ""]?xvb)
exten => h,10(xvb),Macro(agi-run,local_call,mode=stop)

;--------------------------------------------------------------------
; Phone services
;
[xvb-phone-services]
; echo example
exten => _**0,1,Playback(dialout-record-start)
exten => _**0,n,Playback(beep)
exten => _**0,n,Set(TIMEOUT(absolute)=30)
exten => _**0,n,Echo
exten => _**0,n,Set(WHO_TERM=DST)
;
; callerid service
exten => _**1,1,Playback(dialout-callerid)
exten => _**1,n,Wait(1)
exten => _**1,n,SayDigits(${CALLERID(num)})
exten => _**1,n,Set(WHO_TERM=DST)
;
; pickup service
exten => _**2.,1,Macro(agi-setup)
exten => _**2.,n,Macro(agi-run,call_pickup_hook,phone=${EXTEN:3}&cid=${CALLERID(num)})
exten => _**2.,n,GotoIf($["${XVB_PICKUP_STATUS}" = "2"]?remote-server)
exten => _**2.,n,GotoIf($["${XVB_PICKUP_STATUS}" = "1"]?local-server)
exten => _**2.,n,Set(WHO_TERM=DST)
exten => _**2.,n,Hangup
;
exten => _**2.,1000(local-server),Set(__XVB_PICKUP_NUM=${EXTEN:3})
exten => _**2.,n,Set(__PICKUP_START=${EPOCH})
exten => _**2.,n,Goto(xvb-pickup,pickup,1)
;
; currently it works only in standalone mode.
; ToDo: support for  sip-registrar
exten => _**2.,2000(remote-server),SIPAddHeader("XVB-AC:${XVB_AC}")
exten => _**2.,n,SIPAddHeader("XVB-PICKUP-CHANNEL:${XVB_PICKUP_CHANNEL}")
exten => _**2.,n,SIPAddHeader("XVB-PICKUP-NUM:${EXTEN:3}")
exten => _**2.,n,SIPAddHeader("XVB-PICKUP-CUR-EXT:${XVB_CUR_EXT}")
exten => _**2.,n,SIPAddHeader("XVB-PICKUP-SUBSCR-ID:${SUBSCR_ID}")
exten => _**2.,n,Dial(SIP/${XVB_PICKUP_SERVER}/pickup)
exten => _**2.,n,Set(WHO_TERM=DST)
exten => _**2.,n,Hangup
;
; last dialed number
exten => _**3,1,Macro(agi-run,memcache_var,var=sh-last-dialed-${SUBSCR_ID}-${MD5(${CALLERID(num)})})
exten => _**3,n,GotoIF($["${MEMCACHE_RESULT}" =""]?err)
exten => _**3,n,Set(XVB_REDIALER_SERVICE=yes)
exten => _**3,n(loop),Playback(dialout-intro)
exten => _**3,n,Goto(xvb-phones,${MEMCACHE_RESULT},1)
exten => _**3,1000,GotoIf($["${DIALSTATUS}" = "ANSWER"]?end)
exten => _**3,n,Macro(agi-run,local_call,mode=stop)
exten => _**3,n,Set(i=1)
exten => _**3,n,While($[${i} < 5])
exten => _**3,n,Playback(beep)
exten => _**3,n,Wait(2)
exten => _**3,n,Set(i=$[${i} + 1])
exten => _**3,n,EndWhile
exten => _**3,n,Goto(loop)
exten => _**3,n(err),Set(WHO_TERM=PBX)
exten => _**3,n(end),Hangup
;
; xway-call
exten => _**4.,1,Macro(agi-run,xway_call,num=${EXTEN:3})
exten => _**4.,n,Goto(xvb-xway-conf,s,1)
;
; Disa features
; DND
exten => _**70,1,Macro(agi-run,phone_attr,attr=DND&var=0)
exten => _**70,n,Set(DEVICE_STATE(Custom:XVB-${XVB_AC}-${CALLERID(num)})=NOT_INUSE)
exten => _**70,n,Playback(saved)
exten => _**71,1,Macro(agi-run,phone_attr,attr=DND&var=${EPOCH})
exten => _**71,n,Set(DEVICE_STATE(Custom:XVB-${XVB_AC}-${CALLERID(num)})=BUSY)
exten => _**71,n,Playback(saved)
; Call forward
; desabled
exten => _**720,1,Macro(agi-run,phone_attr,attr=FWD_AFTER&var=-1)
exten => _**720,n,Playback(saved)
; always
exten => _**721,1,Macro(agi-run,phone_attr,attr=FWD_AFTER&var=0)
exten => _**721,n,Playback(saved)
; after 3 rings
exten => _**722,1,Macro(agi-run,phone_attr,attr=FWD_AFTER&var=12)
exten => _**722,n,Playback(saved)
; after 5 rings
exten => _**723,1,Macro(agi-run,phone_attr,attr=FWD_AFTER&var=20)
exten => _**723,n,Playback(saved)
;
; DialOut with announce with custom prompt
exten => _**73.,1,Set(_XVB_CALL_OPTIONS=M(xvb-bg-announce,${EXTEN:4:2}))
exten => _**73.,n,Goto(xvb-phones,${EXTEN:6},1)
;
;exten => _**74.,1,Set(FPATH=/opt/VirtualPBX/recordings/${XVB_AC:-3}/${XVB_AC}/sys_media/custom-prompt-${EXTEN:4:2})
;exten => _**74.,n,Set(XVB_CALL_OPTIONS=A(${FPATH}))
;exten => _**74.,n,Goto(xvb-phones,${EXTEN:6},1)
;
; last caller cleanup
exten => _**75.,1,Macro(agi-run,cleanup_last_caller,number=${EXTEN:4})
exten => _**75.,n,Playback(saved)
;
; Q status **761 - on / **760 - off; **761123 - on for q ext-d == 123
exten => _**76.,1,Macro(agi-run,q_login_status,status=${EXTEN:4:1}&id=${EXTEN:5})
exten => _**76.,n,Playback(saved)
;
; Hot desking
exten => _**77.,1,Set(HDPININ=${EXTEN:5})
exten => _**77.,n,GotoIf($["${HDPININ}" = ""]?hdset)
exten => _**77.,n,Set(HDPININ=${CUT(HDPININ,*,2)})
exten => _**77.,n,GotoIf($["${HDPININ}" != ""]?hdset)
exten => _**77.,n,Read(HDPIN,input-passwd)
exten => _**77.,n,Macro(agi-run,hot_desk,dialstr=${EXTEN:5}*${HDPIN})
exten => _**77.,n,Goto(hdstatus)
exten => _**77.,n(hdset),Macro(agi-run,hot_desk,dialstr=${EXTEN:5})
exten => _**77.,n(hdstatus),GotoIf($["${HDSET_STATUS}" = ""]?err)
exten => _**77.,n,Playback(saved)
exten => _**77.,n,Hangup
exten => _**77.,n(err),Playback(invalid-input)
;
exten => i,1,Playback(invalid-input)
;
exten => h,1,Goto(xvb-phones,h,1)
;
#include "/etc/asterisk/xvb/xvb-phone-service.conf"

;--------------------------------------------------------------------
; peers
;
[xvb-peers]
;
exten => _DIDX.,1,Set(__XVB_IS_U_PEER=1)
exten => _DIDX.,n,Goto(xvb-main,${EXTEN:3},1)
exten => _X.,1,Set(__XVB_IS_U_PEER=1)
exten => _X.,n,Goto(xvb-main,${EXTEN},1)

[xvb-peers-with-reg]
;
exten => _.,1,Set(XVB_DID=${BASE64_DECODE(${INC_EXT})})
exten => _.,n,Goto(xvb-peers,${XVB_DID},1)

[xvb-peers-oos]
exten => _X.,1,Congestion()

[xvb-peers2phone]
exten => _[0-9*+].,1,GotoIF($["${SUBSCR_ID}" != ""]?xvb-phones,${EXTEN},1)
exten => _[0-9*+].,n,Congestion()

;--------------------------------------------------------------------
; example for dialout context
;
[xvb-dialout-def]
exten => _X.,1,SIPAddHeader("XVB-AC:${XVB_AC}")
;
exten => _X.,n,Macro(agi-setup)
exten => _X.,n,Macro(agi-run,did2ac,did=${CALLERID(num)})
;
; restrict DIDs
;
exten => _X.,n,GotoIf($["${XVB_AC}" = "${XVB_DID2AC_RESULT}"]?cidok)
exten => _X.,n,ExecIf($["${XVB_DEFAULT_CID}" = ""]?Hangup)
;
exten => _X.,n,Set(CALLERID(num)=${XVB_DEFAULT_CID})
;
exten => _X.,n(cidok),GotoIf($["${XVB_IS_PSTN_CALL}" = ""]?call)
exten => _X.,n,Set(DIVERSION_MODE=${GLOBAL(PBX_SET_DIVERSION)})
exten => _X.,n,GotoIf($["${DIVERSION_MODE}" = "1"]?divmode1)
exten => _X.,n,GotoIf($["${DIVERSION_MODE}" = "2"]?divmode2)
exten => _X.,n,Goto(call)
;
exten => _X.,n(divmode1),SIPAddHeader(Diversion: <sip:${ORIG_CALLEDID}@null>\;reason=unknown))
exten => _X.,n,Goto(call)
;
exten => _X.,n(divmode2),SIPAddHeader(Diversion: <sip:${ORIG_CALLEDID}@null>\;reason=unknown))
exten => _X.,n,Set(CALLERID(num)=${ORIG_CALLERID})
exten => _X.,n,Goto(call)
;
exten => _X.,n(call),NoOp(Check for local DID)
exten => _X.,n,Set(PBX_CHECK4LOCAL_DID=${GLOBAL(PBX_CHECK4LOCAL_DID)})
exten => _X.,n,GotoIf($["${PBX_CHECK4LOCAL_DID}" != "1"]?calldialout)
exten => _X.,n,Macro(agi-run,did2ac,did=${EXTEN})
exten => _X.,n,GotoIf($["${XVB_DID2AC_RESULT}" = ""]?calldialout)
exten => _X.,n,Goto(xvb-main,${EXTEN},1)
;
exten => _X.,n(calldialout),Dial(SIP/dialout-service/${EXTEN},,i${XVB_DIALOUT_OPTIONS})
;
; shared firewall
;
exten => OOS,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => OOS,n,Playback(oos)
exten => OOS,n,Answer
exten => OOS,n,Hangup
;
; DND
;
exten => DND,1,Hangup(2)
;
; Auto DTMF input
;
exten => _DTMF.,1,Set(DTMFSTR=${EXTEN:4})
exten => _DTMF.,n,Set(DTMF_NUM=${CUT(DTMFSTR,*,1)})
exten => _DTMF.,n,Set(DTMF_DATA=${CUT(DTMFSTR,*,2)})
exten => _DTMF.,n,Set(DTMF_DATA=${CUT(DTMF_DATA,^,1)})
exten => _DTMF.,n,ExecIf($["${DTMF_DATA}" != ""]?Set(XVB_DIALOUT_OPTIONS=${XVB_DIALOUT_OPTIONS}M(xvb-dialout-def-dtmf^${DTMF_DATA})))
exten => _DTMF.,n,Goto(xvb-dialout-def,${DTMF_NUM},1)
;
exten => XVBSPY,1,Goto(xvb-chan-spy,spy,1)
;
; TECHXXX prefixes
;
; 5 Min of silence
;
exten => TECH001,1,Answer
exten => TECH001,n,Wait(300)
exten => TECH001,n,Hangup

;--------------------------------------------------------------------
; default conference context
;
[xvb-conf-def]
exten => _X.,1,Answer()
exten => _X.,n,GotoIf($["${IS_HTTP_BROADCASTING}" != ""]?broadcasting)
exten => _X.,n,Konference(${EXTEN},Mx)
exten => _X.,n,Hangup()
;
exten => _X.,613(broadcasting),Konference(${EXTEN},Lx)
exten => _X.,n,Hangup()

[xvb-conf-cluster]
exten => _X.,1,GotoIf($["${GLOBAL(PBX_CONFERENCE_SERVER)}" != ""]?clustermode)
exten => _X.,n,Goto(xvb-conf-def,${EXTEN},1)
exten => _X.,n(clustermode),SIPAddHeader(XVB-CONF-ID: ${EXTEN})
exten => _X.,n,SIPAddHeader(XVB-CONF-BROADCASTING: ${IS_HTTP_BROADCASTING})
exten => _X.,n,Dial(SIP/conference@${GLOBAL(PBX_CONFERENCE_SERVER)})

; xway-conf
;
[xvb-xway-conf]
exten => s,1,Answer()
exten => s,n,Set(TIMEOUT(absolute)=10800)
exten => s,n,Konference(${XWAY_CONFID},Mx)
exten => s,n,Hangup()
exten => h,1,Goto(xvb-phones,h,1)

; xway-conf-4-call
;
[xvb-conf4call-host]
exten => s,1,Answer()
exten => s,n,Set(TIMEOUT(absolute)=10800)
exten => s,n,Konference(${XWAY_CONFID},Mx,max_users=${XWAY_MAXP})
exten => s,n,Hangup()
;
[xvb-conf4call-guest]
exten => s,1,Answer()
exten => s,n,Set(TIMEOUT(absolute)=10800)
exten => s,n,Konference(${XWAY_CONFID},x)
exten => s,n,Hangup()
exten => h,1,Goto(xvb-phones,h,1)

;--------------------------------------------------------------------
; conference broadcasting & recording
;
[xvb-conf-http-broadcasting]
exten => _X.,1,Answer()
exten => _X.,n,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => _X.,n,GotoIf($["${RECORDED_FILE}" = ""]?broadcasting)
;
exten => _X.,n,MixMonitor(${RECORDED_FILE})
exten => _X.,n,GotoIf($["${STREAM_KEY}" = ""]?waitloop)
;
exten => _X.,n(broadcasting),Playback(${START_FILE})
exten => _X.,n,ices(${CHAN_FILE})
exten => _X.,n,Playback(${END_FILE})
exten => _X.,n,Hangup
;
exten => _X.,n(waitloop),Wait(3600)
exten => _X.,n,Goto(waitloop)
;
exten => h,1,Macro(agi-setup)
exten => h,n,Macro(agi-run,memcache_counter,mode=decr&var=${STREAM_KEY})
exten => h,n,GotoIf($["${RECORDED_FILE}" = ""]?end)
exten => h,n,StopMixMonitor()
exten => h,n,Macro(agi-run,save_recording)
exten => h,n(end),NoOp(Conf-Is-Over)

;--------------------------------------------------------------------
; streaming context's
;
[xvb-streaming-player-single]
exten => _X.,1,Answer()
exten => _X.,n,MP3Player(${URL})
exten => _X.,n,Hangup

[xvb-streaming-player]
exten => _X.,1,Answer()
exten => _X.,n,Set(Loop=1)
exten => _X.,n,Set(TIMEOUT(absolute)=43200)
exten => _X.,n(loop),MP3Player(${URL})
exten => _X.,n,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => _X.,n,Playback(${POST_FILE})
exten => _X.,n,Set(Loop=$[${Loop} + 1])
exten => _X.,n,GotoIf($[${Loop} > 3]?endconf)
exten => _X.,n,MusicOnHold(default,30)
exten => _X.,n,Goto(loop)
exten => _X.,n(endconf),Hangup()
;
exten => h,1,Macro(agi-setup)
exten => h,n,Macro(agi-run,memcache_counter,mode=decr&var=${STREAM_KEY})

[xvb-streaming-host]
exten => _X.,1,Answer()
exten => _X.,n,Konference(${EXTEN},LMx)
exten => _X.,n,Hangup()

[xvb-streaming-participant]
exten => _X.,1,Answer()
exten => _X.,n,Wait(1)
exten => _X.,n,Konference(${EXTEN},x)
exten => _X.,n,Hangup()

;--------------------------------------------------------------------
; parking context's
;
[xvb-call-parking]
exten => parking,1,Macro(agi-setup)
exten => parking,n,Macro(agi-run,memcache_var,var=sh-parking-chan-${XVB_CALL_ID}&val=${CHANNEL}&to=86400)
exten => parking,n,Wait(86400)
;
;
exten => unparking,1,Answer
exten => unparking,n,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => unparking,n(main),Bridge(${UNPARK_CHANNEL})
exten => unparking,n,GotoIf($["${BRIDGERESULT}" = "SUCCESS"]?ok)
exten => unparking,n,Playback(parking-invalid-slot)
exten => unparking,n,Goto(stop)
exten => unparking,n(ok),Macro(agi-setup)
exten => unparking,n,Macro(agi-run,memcache_var,var=sh-parking-chan-${UNPARK_CALL_ID}&val=0&to=1)
exten => unparking,n(stop),Hangup

;--------------------------------------------------------------------
; nodes exchange
;
[xvb-nodes-exchange]
exten => unparking,1,Answer
exten => unparking,n,Set(UNPARK_CHANNEL=${SIP_HEADER(XVB-Unpark-Channel)})
exten => unparking,n,Set(UNPARK_CALL_ID=${SIP_HEADER(XVB-Unpark-Call-Id)})
exten => unparking,n,Set(CHANNEL(language)=${SIP_HEADER(XVB-Unpark-Lang)})
exten => unparking,n,Goto(xvb-call-parking,${EXTEN},main)
;
exten => conference,1,Set(IS_HTTP_BROADCASTING=${SIP_HEADER(XVB-CONF-BROADCASTING)})
exten => conference,n,Goto(xvb-conf-def,${SIP_HEADER(XVB-CONF-ID)},1)
;
exten => pickup,1,Set(__XVB_AC=${SIP_HEADER(XVB-AC)})
exten => pickup,n,Set(__XVB_PICKUP_CHANNEL=${SIP_HEADER(XVB-PICKUP-CHANNEL)})
exten => pickup,n,Set(__XVB_PICKUP_NUM=${SIP_HEADER(XVB-PICKUP-NUM)})
exten => pickup,n,Set(__SUBSCR_ID=${SIP_HEADER(XVB-PICKUP-SUBSCR-ID)})
exten => pickup,n,Set(__XVB_CUR_EXT=${SIP_HEADER(XVB-PICKUP-CUR-EXT)})
exten => pickup,n,Set(__PICKUP_START=${EPOCH})
exten => pickup,n,Set(__PICKUP_MODE=remote)
exten => pickup,n,Goto(xvb-pickup,pickup,1)

;--------------------------------------------------------------------
; BackGroundMusic
;
[xvb-bg-music]
exten => play,1,Answer
exten => play,n,Macro(agi-setup)
exten => play,n,Macro(agi-run,memcache_counter,mode=incr&var=bg-moh-${XVB_SPY_CHAN})
exten => play,n,GotoIf($[${MEMCACHE_RESULT} > ${XVB_MAX_HOOKS}]?hangup)
exten => play,n,NoOp(${MEMCACHE_RESULT})
exten => play,n,GotoIF($["${XVB_SPY_CHAN_ID}" =""]?loop)
exten => play,n,Macro(agi-run,memcache_var,var=${XVB_SPY_CHAN_ID}&val=${CHANNEL}&to=43200)
exten => play,n(loop),Playback(${XVB_SPY_MOH_FILE})
exten => play,n,GotoIf($["${XVB_PLAY_MODE}" = "0"]?hangup)
exten => play,n,GotoIF($["${PLAYBACKSTATUS}" = "SUCCESS"]?loop)
exten => play,n(hangup),Hangup
;
exten => h,1,NoOp(BG-MUSIC-HANGUP)
exten => h,n,GotoIF($["${XVB_SPY_CHILD_CHAN}" =""]?end)
exten => h,n,Macro(agi-run,memcache_var,var=${XVB_SPY_CHILD_CHAN})
exten => h,n,GotoIF($["${MEMCACHE_RESULT}" =""]?end)
exten => h,n,SoftHangup(${MEMCACHE_RESULT})
exten => h,n(end),Macro(agi-run,memcache_counter,mode=decr&var=bg-moh-${XVB_SPY_CHAN})

;--------------------------------------------------------------------
; Pickup
;
[xvb-pickup]
exten => pickup,1,Set(XVB_PICKUP_CID=${CALLERID(num)})
exten => pickup,n,PickupChan(${XVB_PICKUP_CHANNEL})
exten => pickup,n,Set(WHO_TERM=DST)
exten => pickup,n,Hangup
;
exten => h,1,Macro(agi-run,pickup_status?mode=stop&pickup_mode=${PICKUP_MODE})
exten => h,n,NoOp(EndPickup)

;--------------------------------------------------------------------
; Paging/Intercom
;
[xvb-intercom]
exten => _X.,1,SIPAddHeader(Alert-Info: ${ALERT_INFO})
exten => _X.,n,SIPAddHeader(Call-Info: ${CALL_INFO})
exten => _X.,n,GotoIF($["${PAGE_STR}" =""]?dial)
exten => _X.,n,Page(${PAGE_STR},${PAGE_OPT})
exten => _X.,n,Hangup()
exten => _X.,100(dial),Dial(${DIAL_STR})
exten => _X.,n,Hangup()

;--------------------------------------------------------------------
; FMC-Transfer
;
[xvb-fmc-transfer]
exten => s,1,Answer
exten => s,n,Macro(agi-setup)
exten => s,n,Set(NOCDR=yes)
exten => s,n,Macro(agi-run,fmc_transfer_status,status=success)
exten => s,n,GotoIf($["${XVB_FMC_TLIMIT}" = "0"]?wotimelimit)
exten => s,n(withtimelimit),Bridge(${A_LEG_CHANNEL},xS(${XVB_FMC_TLIMIT}))
exten => s,n,Goto(endfmctransfer)
exten => s,n(wotimelimit),Bridge(${A_LEG_CHANNEL},x)
exten => s,n(endfmctransfer),NoOp(EndFMC)
;
exten => h,1,GotoIf($["${NOCDR}" = "yes"] ?nocdr)
exten => h,n,Macro(agi-setup)
exten => h,n,Macro(agi-run,fmc_transfer_status,status=failed)
exten => h,n(nocdr),NoOp(Call End)
;
exten => failed,1,Macro(agi-setup)
exten => failed,n,Set(NOCDR=yes)
exten => failed,n,Macro(agi-run,fmc_transfer_status,status=failed)

;--------------------------------------------------------------------
[xvb-smartdial-local-hook]
exten => s,1,Dial(${SDparam1},,${SDparam3},${SDparam4})
exten => s,n,Hangup

;--------------------------------------------------------------------
;  at transfer
;
[xvb-call-at-transfer]
exten => _*.,1,Set(CALLED_NUMBER=${EXTEN})
exten => _*.,n,Goto(00${$EXTEN},digits)
exten => _X,1,Set(CALLED_NUMBER=${EXTEN})
exten => _X,n,Goto(00${$EXTEN},digits)
exten => _X.,1,Set(CALLED_NUMBER=${EXTEN})
;exten => _X.,n,Answer
exten => _X.,n(digits),Macro(agi-setup)
;exten => _X.,n,DumpChan()
exten => _X.,n,Macro(agi-run,atxfer,mode=start)
exten => _X.,n,GotoIf($["${ATXFER_CALL_STR}" = ""]?end)
exten => _X.,n,Set(WHO_TERM=SRC)
exten => _X.,n,Dial(${ATXFER_CALL_STR})
exten => _X.,n,Set(WHO_TERM=DST)
exten => _X.,n,GotoIf($["${XVB_CUR_LANG}" = ""]?deflang)
exten => _X.,n,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => _X.,n,Goto(status)
exten => _X.,n(deflang),Set(CHANNEL(language)=${GLOBAL(PBX_DEFAULT_LANG)})
exten => _X.,n(status),NoOp
exten => _X.,n,ExecIf($["${DIALSTATUS}" = "BUSY"]?Playback(dialout-busy,noanswer))
exten => _X.,n,ExecIf($["${DIALSTATUS}" = "NOANSWER"]?Playback(dialout-noanswer,noanswer))
exten => _X.,n(end),NoOp(EndAtxFer)
;
exten => h,1,GotoIf($["${ATXFER_CALL_STR}" = ""]?end)
exten => h,n,Macro(agi-run,atxfer,mode=stop)
exten => h,n(end),NoOp(EndAtxFer)

;--------------------------------------------------------------------
; chan-spy
;
[xvb-chan-spy]
exten => spy,1,Set(AST_CHAN=${BASE64_DECODE(${UV_6bf6dd714f2cc33c716dca383ca0865a})})
exten => spy,n,Set(XVB_CHAN=${BASE64_DECODE(${UV_e8df69b81da887b9585d5c6283d586c5})})
exten => spy,n,ExecIf($["${AST_CHAN}" = ""]?Hangup)
exten => spy,n,ExecIf($["${XVB_CHAN}" = ""]?Hangup)
exten => spy,n,Macro(agi-setup)
exten => spy,n,Macro(agi-run,get_full_var,var=XVB_CALL_ID&new_var=LOCAL_XVB_CALL_ID&chan=${AST_CHAN})
exten => spy,n,GotoIf($["${XVB_CHAN}" = "${LOCAL_XVB_CALL_ID}"]?run)
exten => spy,n,Hangup
;
exten => spy,100(run),Answer
exten => spy,n,ChanSpy(${AST_CHAN},qEX)
;
exten => 1,1,ChanSpy(${AST_CHAN},qEwX)
;
exten => 3,1,Macro(agi-setup)
exten => 3,n,Macro(agi-run,get_full_var,var=BRIDGEPEER&new_var=AST_CHAN_B&chan=${AST_CHAN})
exten => 3,n,NoOp(${AST_CHAN_B})
exten => 3,n,GotoIf($["${AST_CHAN_B}" = ""]?end)
exten => 3,n,ChanSpy(${AST_CHAN_B},qEwX)
exten => 3,100(end),ChanSpy(${AST_CHAN},qEX)
;
exten => 8,1,ChanSpy(${AST_CHAN},qEX)
;
exten => i,1,Hangup

;--------------------------------------------------------------------
; xvb-subscribe
;
[xvb-subscribe]
;
;exten => _blfX.,hint,${CURL(http://localhost/helper/hint?ext=${EXTEN:3}&id=${SUBSCR_ID}&uri=${SIPURI})}
;exten => _BLF*X.,hint,${CURL(http://localhost/helper/hint?ext=${EXTEN:4}&from=${SUBSCRIBE_USER})}
;exten => _X.,hint,SIP/${EXTEN}
; BLF*ext*access_code*user_id
exten => _BLF*X.,hint,${CURL(http://localhost/helper/hint?ext=${EXTEN:4})}
; black-list
[xvb-subscribe-bl]

;--------------------------------------------------------------------
; xvb-direct call
;		direct*10019*102
;
;	no DND, no Redirects, no VM
;
[xvb-direct-call]
exten => _direct.,1,Macro(agi-setup)
exten => _direct.,n,Macro(agi-run,phone_sipname,dialstr=${EXTEN:6})
exten => _direct.,n,ExecIf($["${PHONE_SIPNAME}" = ""]?Hangup)
exten => _direct.,n,GotoIf($["${PHONE_REGISTRAR}" = ""]?direct)
exten => _direct.,n,Dial(SIP/${PHONE_REGISTRAR}/${PHONE_SIPNAME})
exten => _direct.,n,Hangup
exten => _direct.,n(direct),Dial(SIP/${PHONE_SIPNAME})
exten => _direct.,n,Hangup

;--------------------------------------------------------------------
; external call tracking
; 
[xvb-ext-calltracking]
; roistat
exten => _roistat-.,1,Set(_FROM_ROISTAT=1)
exten => _roistat-.,n,Goto(xvb-main,${EXTEN:8},1)
; primegate
exten => _primegate-.,1,Set(_FROM_PRIMEGATE=1)
exten => _primegate-.,n,Goto(xvb-main,${EXTEN:10},1)

